hook配置
	export GIT_SSH_COMMAND='ssh -o KexAlgorithms=+diffie-hellman-group1-sha1'
	Host *
		KexAlgorithms +diffie-hellman-group1-sha1

------------------------------------------------------
git fetch ssh://houll0709@192.168.100.149:29418/autotest/msClient refs/changes/31/59131/4 && git cherry-pick FETCH_HEAD
解决冲突
git cherry-pick --continue

git push origin HEAD:refs/for/autotest-android4-dev
git rm -r --cached file    //删除缓存区文件,工作区保留(已经add的文件)
git rm -r -n --cached file
git rm -r -f --cached file //直接删除缓存区和工作区的文件
git checkout file
git reset HEAD file
git reset commit
git log --author="houll0709" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }'
git log --stat|perl -ne 'END { print $c } $c += $1 if /(\d+) insertions/'

-- ------------------------------------------------------------------------------------------
adb devices
adb -s <serial-num> shell
adb -s c7c6eec2 shell screenrecord --time-limit 20 /sdcard/demo1.mp4
adb -s c7c6eec2 pull /sdcard/demo.mp4
-- ------------------------------------------------------------------------------------------

没有消息就是好消息，Unix的哲学
	shutdown -r now    reboot
	sudo useradd -m hadoop"为什么没有选项 -m 无法创建家目录
	当一个用户不在suders文件中的时候，他就无法通过sudo使用root权限
	bashrc与profile都用于保存用户的环境信息，
		bashrc用于交互式non-loginshell，而profile用于交互式login shell
		/etc/profile中设定的变量(全局)的可以作用于任何用户,
		而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是"父子"关系.
	ps -aux
	netstat -apn
	chown -r root:root jdk_1.8
	command -v git   :命令的所处路径

git：只能跟踪可编码变换的文本文档，对于二进制文件则只能简单的跟踪
	git config --global user.name "Your Name"
	git config --global user.email "email@example.com"
	git init	 :初始化一个仓库
	git add xxx :让本地仓库文件缓存到暂存区每次修改之后都
		       需要添加文件到暂存区 然后提交,如果直接提交，
		       则仓库对已改文件无记录，即未提交至仓库
	git commit -m "" :
	git status     :
	git diff	       :
	git log          :查看提交记录 -m 选项内容 选项：--pretty=oneline
	git reset --hard HEAD^
		       :HEAD^^  3628164（版本号） 根据版本号可回退至任何版本
	git reflog      :git  就 操作HEAD的历史（日志） 
工作区（workspace）:
版本库(Repository) :
	工作区有一个隐藏目录 .git,这个不算工作区,而是Git的版本库。
	Git的版本库里存了很多东西,其中最重要的就是称为stage(或者叫index)的暂存区,
	还有Git为我们自动创建的第一个分支 master,以及指向 master的一个指针叫HEAD。

	git add	   把文件添加进去,实际上就是把文件修改添加到暂存区;
	git commit 提交更改,实际上就是把暂存区的所有内容提交到当前分支。
		   因为我们创建Git版本库时,Git自动为我们创建了唯一一个master
		   分支,所以,现在, git commit 就是往master分支上提交更改。	
	Git跟踪并管理的是修改,而非文件，每次修改都要git add 到暂存区 ，即暂存区缓存的是修改
	
git checkout -- readme.txt：  （暂存区和版本库）
	1：工作区文件修改后未添加到暂存区，则撤销修改工作区就会回到和版本库一模一样状态 
	2：工作区文件首次修改后添加到暂存区，又一次修改工作区，则撤销修改还是回到和版本库一致
	总之,就是让工作区文件回到最近一次git commit 或git add 时的状态。？？？？？？？
git reset HEAD file：HEAD 表示最新版本
	即把最近一次添加到暂存区的修改，(unstage),撤回到工作区

	场景1:当你改乱了工作区某个文件的内容,想直接丢弃工作区的修改时,用命令git checkout --file。
	场景2:当你不但改乱了工作区某个文件的内容,还添加到了暂存区时,想丢弃修改,分两步,
	      第一步用命令 git reset HEAD file,就回到了场景1,第二步按场景1操作。
	场景3:已经提交了不合适的修改到版本库时,想要撤销本次提交,则可通过控制HEAD回退版本,
	      不过前提是没有推送到远程库。
git rm file ：将版本库中文件删除
    rm .git ：删除本地git库
    
systemctl status sshd
systemctl start sshd
systemctl reload sshd
ssh root@***.***.*.***  ：远程登录 IP下的 root用户
ssh-keygen -t rsa -C 'holyzing@163.com'

Git支持SSH协议,所以,GitHub只要知道了你的公钥就可以确认只有你自己才能推送。
git属于一个开源社区，所以托管上去的代码，别人都可以看到，但是只有自己可以修改！

git remote add origin git@server-name:path/repo-name.git	 ;
git remote add origin git@github.com:holyzing/learngit.git
	:在本地仓库目录下将本地仓库与远程仓库关联，且远程仓库叫做learngit
	:origin 关联一个远程仓库的 连接 的名称，创建远程时对仓库没有要求
git remote remove origin
	:移除与远程仓库的关联 
git remote:
	查看当前仓库下的所有远程 -v:查看详细信息
git push origin	master
	:将本地库(本地的master分支)通过远程连接 origin 同步到 新的master分支，
	:远程仓库必须存在，且远程仓库中不能包含本地仓库不存在的文件或者文件夹
		提示：更新被拒绝，因为远程仓库包含您本地尚不存在的提交。这通常是因为另外
		提示：一个仓库已向该引用进行了推送。再次推送前，您可能需要先整合远程变更
		提示：（如 'git pull ...'）。
		提示：详见 'git push --help' 中的 'Note about fast-forwards' 小节。

	:git push -u origin master:
		当远程库是空的,我们第一次推送master分支的所有内容,加上-u参数,
		Git不但会把本地的master分支内容推送到远程新的master分支,还会
		把本地的分支和远程的master分支关联起来,在以后的推送中简化命令

	 Git使用SSH连接,而SSH连接在第一次验证GitHub服务器的Key时,需要你确认
	 GitHub的Key的指纹信息是否真的来自GitHub的服务器，确认后，Git会输出
	 一个警告,告诉你已经把GitHub的Key添加到本机的一个信任列表里了
	 关联之后，通过push可以将本地分支已提交的修改同步到远程分支

git pull origin	master
	:当远程仓库存在本地仓库不存在的文件/文件夹 时，是无法把本地仓库push上去的
	:因为是不同步的，此时通过pull 将远程仓库内容 拉下来 合并到本地仓库

	在gitup上新建的repo中会有一个生成README.md文件的选择，
	该文件是用 markedown的语言编写的，一般作为codeSource说明

git clone git@github.com:holyzing/test2.git 
git clone https://github.com/holyzing/test2.git
	：克隆远程 仓库到 到终端命令执行路径下
	：git支持 https:// 和 ssh:// 协议
	：使用https除了速度慢以外,还有个最大的麻烦是每次推送都必须输入口令,但是在
	  某些只开放http端口的公司内部就无法使用ssh协议而只能用https。但原生ssh最快
	
分支： HEAD 就是指向分支指针的指针
	git check -b branch1：创建分支，并切换分支，等价于
		git branch branch1
		git checkout branch1
	git是对仓库内文件做修改跟踪，
		每个分支都会备份它所修改的文件,以便它修改并且记录修改,   ????? 
	合并分支到主分支:git merge branch1 
		Fast-forward模式:就是当前分支所提交的修改所在的文件 并没有被主分支所备份
		即并没有被其它分支修改且提交,那么这样就可直接将分支指针HEAD指向主分支master
		从而实现分支到主分支的合并 (猜测:分支拷贝文件覆盖原文件?)
		
	   冲突:
		被合并分支与待合并分支同时备份同一个文件,覆盖文件内容时出现冲突,需要手动解决
		
		出现合并冲突,git会记录这次的合并路径,通过 git status 可查看合并情况,
		
		您需要先解决当前索引的冲突,才能进行进一步操作,即 修改文件文件后 add 和 commit

		git log	--graph	--pretty=oneline --abbrev-commit
			查看合并分支路径图
		git merge --no-ff -m "merge with no-ff" dev 
			本次合并要创建一个新的commit
			合并分支时,加上 --no-ff	参数就可以用普通模式合并,
			合并后的历史有分支,能看出来曾经做过合并,
			而 fast forward合并就看不出来曾经做过合并
	bug分支:出现bug需要解决,当前分支内容不便提交,则保存当前分支,切换到解决需要重开分支的分支
		git stash:保存分支现场 (使工作区呈干净状态)
		git stash list:所保存的分支现场列表
		git stash apply:恢复分支工作,不删除列表记录
		git stash pop:恢复分支工作,删除列表记录
	删除分支:git branch -d branch1
		:git branch -D branch1 删除没有合并过的分支
多人协作:当你从远程仓库克隆时,实际上Git自动把本地的master分支和远程的master分支对应起来了
	推送分支:
		master 分支是主分支,因此要时刻与远程同步;
		dev    分支是开发分支,团队所有成员都需要在上面工作,所以也需要与远程同步;
		bug    分支只用于在本地修复bug,就没必要推到远程了,
		feature分支是否推到远程,取决于你是否和你的小伙伴合作在上面开发。
	抓取分支:
		多人协作时,大家都会往master和dev分支上推送各自的修改。
		克隆远程分支时只能克隆master分支,即在本地只能仓库只能看到 master分支
		git checkout -b	dev origin/dev 
			创建远程dev分支到本地主分支下
		git branch --set-upstream-to dev origin/dev
			指定本地 dev分支与远程origin/dev分支的链接
		最新提交和你试图推送的提交有冲突,用 git pull把最新的
		提交从origin/dev 抓下来,然后,在本地合并,解决冲突,再推送
	标签管理:
		发布一个版本时,我们通常先在版本库中打一个标签,这样,就唯一确定了打标签
		时刻的版本。将来无论什么时候,取某个标签的版本,就是把那个打标签的时刻的
		历史版本取出来。所以,标签也是版本库的一个快照。Git的标签虽然是版本库的快照,
		但其实它就是指向某个commit的指针,所以,创建和删除标签都是瞬间完成的。
		(跟分支很像对不对?但是分支可以移动,标签不能移动),
	打标签:git tag v1.0  查看所有标签:git tag

	默认标签是打在最新提交的commit上的。即 HEAD
		有时候,如果忘了打标签,比如,现在已经是周五了,
		但应该在周一打的标签没有打,怎么办?
		方法是找到历史提交的commit id,然后打上就可以了:
			git log --pretty=oneline --abbrev-commit
			git tag	v0.9 6224937
		标签不是按时间顺序列出,而是按字母排序的。
		可以用 	git show v0.9 查看标签信息:
	创建带有说明的标签,用 -a	指定标签名,-m指定说明文字
		git tag -a v0.1	-m "version 0.1	released" 3628164
	还可以通过-s用私钥签名一个标签:
		git tag	-s v0.2	-m "signed version 0.2 released" fec145a
		签名采用PGP签名,因此,必须首先安装gpg(GnuPG),如果没有找到gpg,
		或者没有gpg密钥对,就会报错:如果报错,请参考GnuPG帮助文档配置Key
		用PGP签名的标签是不可伪造的,因为可以验证PGP签名。
		验证签名的方法比较复杂,这里就不介绍了。
	创建的标签都只存储在本地,不会自动推送到远程。所以,打错的标签可以在本地安全删除。
	如果要推送某个标签到远程:  	一次性推送全部尚未推送到远程的本地标签:
		git push origin v1.0		git push origin	--tags
	如果标签已经推送到远程,要删除远程标签就麻烦一点,先从本地删除:
		git tag	-d v0.9
	然后,从远程删除一个远程标签。删除命令也是push,但是格式如下:
		git push origin	:refs/tags/v0.9

使用 gitup:
	Fork”在自己的账号下克隆别人的仓库,然后,从自己的账号下clone
	在GitHub上,可以任意Fork开源仓库;自己拥有Fork后的仓库的读写权限;
	可以推送pull request给官方仓库来贡献代码

自定义git:
	git config --global color.ui true
	


忽略特殊文件
	有些时候,你必须把某些文件放到Git工作目录中,但又不能提交它们,比如保存了
	数据库密码的配置文件啦,等等,每次 git status都会显示 Untracked files
	在Git工作区的根目录下创建一个特殊的 .gitignore 文件,然后把要忽略的文
	件名填进去,Git就会自动忽略这些文件。
	不需要从头写 .gitignore	文件,GitHub已经为我们准备了各种配置文件,只需
	要组合一下就可以使用了。所有配置文件可以直接在线浏览:
		https://github.com/github/gitignore
	忽略文件的原则是:
		1.忽略操作系统自动生成的文件,比如缩略图等;
		2.忽略编译生成的中间文件、可执行文件等,也就是
		如果一个文件是通过另一个文件自动生成的,那自动
		生成的文件就没必要放进版本库,比如Java编译产生的.class文件;
		3.忽略你自己的带有敏感信息的配置文件,比如存放口令的配置文件。
	举个例子:
		假设你在Windows下进行Python开发,Windows会自动在有图片的
		目录下生成隐藏的缩略图文件,如果有自定义目录,目录下就会有
		Desktop.ini文件,因此你需要忽略Windows自动生成的垃圾文件:
			# Windows:
			Thumbs.db
			ehthumbs.db
			Desktop.ini
		然后,继续忽略Python编译产生的 .pyc、.pyo	、dist等文件或目录:
			# Python:
			*.py[cod]
			*.so
			*.egg
			*.egg-info
			dist
			build
		加上你自己定义的文件,最终得到一个完整的 .gitignore文件,内容如下:
			# Windows:
			Thumbs.db
			ehthumbs.db
			Desktop.ini
			# Python:
			*.py[cod]
			*.so
			*.egg
			*.egg-info
			dist
			build
			# Myconfigurations:
			db.ini
			deploy_key_rsa
		最后一步就是把 .gitignore也提交到Git,就完成了!
		git status 返回工作区干净即代表 .gitignore生效
	.gitignore文件本身要放到版本库里,并且可以对.gitignore做版本管理!
配置别名
	git config --global alias.st status
	git config --global alias.co checkout
	git config --global alias.ci commit
	git config --global alias.br branch

	--global :全局参数,也就是这些命令在这台电脑的所有Git仓库下都有用。
	git reset HEAD file 可以把暂存区的修改撤销掉(unstage),重新放回工作区。
	既然是一个unstage操作,就可以配置一个 unstage 别名:
		git config --global alias.unstage 'reset HEAD'
		git unstage test.py<==>git reset HEAD test.py
	配置一个 git last ,让其显示最后一次提交信息:
		git config --global alias.last 'log -1'
		这样,用 git last 就能显示最近一次的提交:
	甚至还有人丧心病狂地把 	lg配置成了:
		git config --global alias.lg "log --color 
			--graph --pretty=format:'%Cred%h%C

	配置Git的时候,加上 --global 是针对当前用户起作用的,如果不加,那只针对当前的仓库起作用。

	每个仓库的Git配置文件都放在 .git/config	文件中:
	别名就在 [alias]后面,要删除别名,直接把对应的行删掉即可。
		cat .git/config	
	而当前用户的Git配置文件放在用户主目录下的一个隐藏文件 .gitconfig	中:
	配置别名也可以直接修改这个文件,如果改错了,可以删掉文件重新通过命令配置。
		cat .gitconfig
搭建Git服务器
	在远程仓库一节中,我们讲了远程仓库实际上和本地仓库没啥不同,
	纯粹为了7x24小时开机并交换大家的修改。

	假设你已经有sudo权限的用户账号,下面,正式开始安装。
		sudo apt-get install git
		sudo adduser git
	创建证书登录:
		收集所有需要登录的用户的公钥,就是他们自己的id_rsa.pub文件,
		把所有公钥导入到/home/git/.ssh/authorized_keys文件里,一行一个。
	初始化Git仓库:
		先选定一个目录作为Git仓库,假定是/srv/sample.git,在/srv目录下输入
		命令: sudo git init --bare sample.git 
		Git就会创建一个裸仓库,裸仓库没有工作区,因为服务器上的Git仓库纯粹
		是为了共享,所以不让用户直接登录到服务器上去改工作区,并且服务器上
		的Git仓库通常都以 .git 结尾。然后,把owner改为git:
			sudo chown -R git:git sample.git
	禁用shell登录:
		出于安全考虑,第二步创建的git用户不允许登录shell,
		通过编辑/etc/passwd文件完成。找到类似下面的一行:
			git:x:1001:1001:,,,:/home/git:/bin/bash
		改为:
			git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
		这样, 	git用户可以正常通过ssh使用git,但无法登录shell,
		因为我们为git用户指定的git-shell每次一登录就自动退出。
	克隆远程仓库:
		git clone git@server:/srv/sample.git
	管理公钥
		如果团队很小,把每个人的公钥收集起来放到服务器的 
		/home/git/.ssh/authorized_keys文件里就是可行的。
		如果团队有几百号人,就没法这么玩了,这时,可以用
		Gitosis来管理公钥。这里我们不介绍怎么玩Gitosis了,
		几百号人的团队基本都在500强了,相信找个高水平的Linux管理员问题不大。
	管理权限
		有很多不但视源代码如生命,而且视员工为窃贼的公司,
		会在版本控制系统里设置一套完善的权限控制,每个人是
		否有读写权限会精确到每个分支甚至每个目录下。
		因为Git是为Linux源代码托管而开发的,所以Git也继承了
		开源社区的精神,不支持权限控制。不过,因为Git支持钩子(hook),
		所以,可以在服务器端编写一系列脚本来控制提交等操作,
		达到权限控制的目的。Gitolite就是这个工具。
		这里我们也不介绍Gitolite了,不要把有限的生命浪费到权限斗争中。

git remote add origin git@github.com:holyzing/learngit.git
--------------------------------------------------------------------------
git branch --set-upstream-to  origin/dev
git branch --track dev origin/<branch>            一般让远程分支和本地分支一致
--------------------------------------------------------------------------

git clone (-b test) http://192.168.7.11:8086/oneiot-server && (cd oneiot-server && curl -kLo `git rev-parse --git-dir`/hooks/commit-msg http://192.168.7.11:8086/tools/hooks/commit-msg; chmod +x `git rev-parse --git-dir`/hooks/commit-msg)


要向仓库声明  name 和 mail 
git push --set-upstream origin master
git add iot-util/pom.xml 
git add -u
git add --all
git commit -m 'holy_cassandra_Util'
git pull origin test
git push origin refs/for/test  (不行)
git push origin HEAD:refs/for/test

scp -p -P 29418 houll0115@192.168.7.11:hooks/commit-msg .git/hooks/ --${gitdir}=.git
git reset 00be8a601ee24477ed07147fa2312b6e9ffd45ea --缺失id
git commit --amend

